import os
import json
import logging
from datetime import datetime, time
from zoneinfo import ZoneInfo

import requests
from flask import Flask, request
import openai

# -------------------- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ ENV --------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
FIBERY_API_TOKEN   = os.getenv("FIBERY_API_TOKEN")

# –í–ê–ñ–ù–û: —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å endpoint –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (space), –∞ –Ω–µ –æ–±—â–∏–π:
# –ü—Ä–∏–º–µ—Ä: https://magatron-lab.fibery.io/api/graphql/space/Magatron_space
FIBERY_API_URL     = os.getenv("FIBERY_API_URL")

# –õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞)
LOCAL_TZ_NAME      = os.getenv("LOCAL_TZ", "Europe/Moscow")

# –ï—Å–ª–∏ true/1 ‚Äî —à–ª—ë–º –≤ –ø–æ–ª–µ due2 (DateRangeInput), –∏–Ω–∞—á–µ ‚Äî –≤ due (String)
USE_DUE2           = os.getenv("FIBERY_USE_DUE2", "0").lower() in ("1", "true", "yes")

openai.api_key = OPENAI_API_KEY

app = Flask(__name__)
logging.basicConfig(level=logging.DEBUG)


# -------------------- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ --------------------
def _safe_fromiso(dt_str: str) -> datetime | None:
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ISO-—Å—Ç—Ä–æ–∫—É –æ—Ç GPT. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
       - 'YYYY-MM-DDTHH:MM:SS'
       - 'YYYY-MM-DDTHH:MM:SSZ'
       - 'YYYY-MM-DD'
       - —Å/–±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è (+03:00).
    """
    if not dt_str:
        return None

    s = dt_str.strip()
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º Z -> +00:00
    if s.endswith("Z"):
        s = s[:-1] + "+00:00"

    try:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è 09:00
        if len(s) == 10 and s.count("-") == 2 and "T" not in s:
            s = f"{s}T09:00:00"
        return datetime.fromisoformat(s)
    except Exception:
        return None


def local_to_utc_z(local_dt: datetime, tz_name: str) -> str:
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º naive dt –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤ tz_name, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º Z."""
    if local_dt.tzinfo is None:
        local_dt = local_dt.replace(tzinfo=ZoneInfo(tz_name))
    utc_dt = local_dt.astimezone(ZoneInfo("UTC"))
    # –§–æ—Ä–º–∞—Ç —Ä–æ–≤–Ω–æ –∫–∞–∫ –ª—é–±–∏—Ç Fibery: —Å–µ–∫ + .000Z
    return utc_dt.strftime("%Y-%m-%dT%H:%M:%S.000Z")


def coerce_gpt_due_to_utc_z(gpt_due: str | None, tz_name: str) -> str | None:
    """–ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –æ—Ç GPT, –ø—Ä–∏–≤–æ–¥–∏–º –∫ UTC Z. –ï—Å–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è ‚Äî None."""
    if not gpt_due:
        return None
    dt = _safe_fromiso(gpt_due)
    if not dt:
        return None
    return local_to_utc_z(dt, tz_name)


# -------------------- Telegram --------------------
def tg_send(chat_id: int | str, text: str) -> None:
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        requests.post(url, json={"chat_id": chat_id, "text": text}, timeout=20)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ Telegram send: %s", e)


# -------------------- GPT –ø–∞—Ä—Å–µ—Ä --------------------
def extract_task_via_gpt(user_text: str) -> dict:
    """–ü—Ä–æ—Å–∏–º GPT –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–≥–æ JSON:
       { "title": str, "description": str, "due": str|null, "labels": [str] }
       –ì–¥–µ 'due' ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ–µ (–ú–°–ö) –≤—Ä–µ–º—è ISO-8601 –±–µ–∑ Z.
    """
    now = datetime.now(ZoneInfo(LOCAL_TZ_NAME)).isoformat(timespec="seconds")

    system_prompt = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–¥–∞—á–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–π –°–¢–†–û–ì–û JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å:\n"
        "title: —Å—Ç—Ä–æ–∫–∞ (–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)\n"
        "description: —Å—Ç—Ä–æ–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)\n"
        "due: —Å—Ç—Ä–æ–∫–∞ –≤ ISO-8601 (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏–ª–∏ null, –µ—Å–ª–∏ —Å—Ä–æ–∫–∞ –Ω–µ—Ç.\n"
        "labels: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.\n"
        "–í–ê–ñ–ù–û:\n"
        "- –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–≤ –ø—è—Ç–Ω–∏—Ü—É), –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è:\n"
        f"  now_local = {now}\n"
        "- –ù–ï —Å—Ç–∞–≤—å —Å—É—Ñ—Ñ–∏–∫—Å 'Z' –∏ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ UTC. –í–µ—Ä–Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø–æ—Å—Ç–∞–≤—å 09:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ.\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ:\n"
        '{\"title\":\"...\",\"description\":\"...\",\"due\":\"YYYY-MM-DDTHH:MM:SS\"|null,\"labels\":[\"...\"]}'
    )

    user_prompt = f"–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}"

    resp = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.1,
    )

    content = resp["choices"][0]["message"]["content"]
    logging.debug("[DEBUG] GPT RAW: %s", content)

    # –ë–µ–∑ eval ‚Äî —Ç–æ–ª—å–∫–æ json.loads
    parsed = json.loads(content)

    # sanity-guard
    parsed.setdefault("title", user_text.strip()[:120] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    parsed.setdefault("description", "")
    parsed.setdefault("labels", [])
    if parsed.get("due") is None:
        pass
    else:
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥–Ω—É—é –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ GPT –¥–∞–ª –º–∏–Ω—É—Ç–Ω—É—é)
        d = _safe_fromiso(parsed["due"])
        if d:
            parsed["due"] = d.strftime("%Y-%m-%dT%H:%M:%S")
        else:
            parsed["due"] = None

    return parsed


# -------------------- Fibery GraphQL --------------------
def fibery_create_task(name: str,
                       due_local_iso: str | None,
                       chat_id: str,
                       msg_id: str) -> tuple[bool, str]:
    """–°–æ–∑–¥–∞—ë—Ç Task –≤ Fibery. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, message)."""

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤ UTC Z –¥–ª—è Fibery
    due_utc_z = coerce_gpt_due_to_utc_z(due_local_iso, LOCAL_TZ_NAME)

    if USE_DUE2:
        # –†–µ–∂–∏–º –ø–æ–ª—è due2 (DateRangeInput): –∂–¥—ë—Ç –æ–±—ä–µ–∫—Ç {start, end} (—Å—Ç—Ä–æ–∫–∏ ISO —Å Z)
        # –ï—Å–ª–∏ end –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–¥–∞–¥–∏–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ start=end.
        variables = {
            "name": name,
            "chatId": chat_id,
            "msgId": msg_id,
            "range": {"start": due_utc_z, "end": due_utc_z} if due_utc_z else None
        }
        query = """
        mutation($name: String!, $range: DateRangeInput, $chatId: String!, $msgId: String!) {
          tasks {
            create(
              name: $name
              due2: $range
              createdInTelegram: true
              telegramChatId: $chatId
              telegramMessageId: $msgId
            ) {
              message
            }
          }
        }
        """
    else:
        # –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ due: String (–æ–∂–∏–¥–∞–µ—Ç UTC ISO —Å Z)
        variables = {
            "name": name,
            "chatId": chat_id,
            "msgId": msg_id,
            "due": due_utc_z
        }
        query = """
        mutation($name: String!, $due: String, $chatId: String!, $msgId: String!) {
          tasks {
            create(
              name: $name
              due: $due
              createdInTelegram: true
              telegramChatId: $chatId
              telegramMessageId: $msgId
            ) {
              message
            }
          }
        }
        """

    payload = {"query": query, "variables": variables}
    headers = {
        "Authorization": f"Token {FIBERY_API_TOKEN}",
        "Content-Type": "application/json",
    }

    logging.debug("[DEBUG] ‚ûú Fibery GraphQL POST %s", FIBERY_API_URL)
    logging.debug("[DEBUG] Query:\n%s", query)
    logging.debug("[DEBUG] Variables:\n%s", json.dumps(variables, ensure_ascii=False, indent=2))

    r = requests.post(FIBERY_API_URL, headers=headers, json=payload, timeout=30)

    try:
        data = r.json()
    except Exception:
        data = {"raw": r.text}

    logging.debug("[DEBUG] ‚á¶ Fibery response:\n%s", json.dumps(data, ensure_ascii=False, indent=2))

    if r.status_code == 200 and isinstance(data, dict) and "errors" not in data:
        msg = (
            data.get("data", {})
               .get("tasks", {})
               .get("create", {})
               .get("message", "Created")
        )
        return True, msg

    return False, json.dumps(data, ensure_ascii=False)


# -------------------- Flask endpoints --------------------
@app.route("/", methods=["GET"])
def index():
    return "OK"

@app.route("/webhook", methods=["POST"])
def tg_webhook():
    body = request.json
    logging.debug("[DEBUG] Incoming update: %s", json.dumps(body, ensure_ascii=False))

    if "message" not in body or "text" not in body["message"]:
        return "ok"

    chat_id = str(body["message"]["chat"]["id"])
    msg_id  = str(body["message"]["message_id"])
    text    = body["message"]["text"]

    try:
        # 1) –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT
        parsed = extract_task_via_gpt(text)
        title  = parsed.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        due_local = parsed.get("due")  # –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ–∑ Z

        # 2) –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ Fibery
        ok, info = fibery_create_task(title, due_local, chat_id, msg_id)

        if ok:
            tg_send(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {title}")
        else:
            tg_send(chat_id, f"‚ùå Fibery –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π:\n{info}")

    except json.JSONDecodeError:
        tg_send(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT. –°–∫–∞–∂–∏ –ø—Ä–æ—â–µ, –ø–ª–∏–∑ üôè")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        tg_send(chat_id, f"‚ùå –ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: {e}")

    return "ok"
