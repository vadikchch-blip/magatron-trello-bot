import os
import openai
import requests
from flask import Flask, request, jsonify
from datetime import datetime
from pytz import timezone
from dotenv import load_dotenv

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
fibery_api_token = os.getenv("FIBERY_API_TOKEN")
fibery_workspace = os.getenv("FIBERY_WORKSPACE")

app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "Magatron 2.0 Fibery is running!"

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    data = request.get_json()

    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    message_id = message.get("message_id")
    text = message.get("text", "")

    print("[DEBUG] –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º system_prompt —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    now = datetime.now(timezone("Europe/Moscow")).isoformat()
    system_prompt = (
        f"–°–µ–≥–æ–¥–Ω—è {now}. "
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π. "
        "–í–µ—Ä–Ω–∏ JSON —Å –∫–ª—é—á–∞–º–∏: title, description (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º), due_date (–≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601), labels (—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫). "
        "–ï—Å–ª–∏ —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ—Å—Ç–∞–≤—å null. –ü—Ä–∏–º–µ—Ä:\n"
        "{\n"
        "  \"title\": \"–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\",\n"
        "  \"description\": \"\",\n"
        "  \"due_date\": \"2025-08-06T15:00:00\",\n"
        "  \"labels\": [\"–ª–∏—á–Ω–æ–µ\"]\n"
        "}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ]
        )
        gpt_response = response.choices[0].message["content"]
        print("[DEBUG] GPT RESPONSE:", gpt_response)

        task_data = eval(gpt_response)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        due_date = task_data.get("due_date")
        if due_date and "2022" in due_date:
            print("[DEBUG] ‚ö†Ô∏è GPT –¥–∞–ª —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É", due_date, ", –∑–∞–º–µ–Ω—è–µ–º")
            due_date = None

        payload = {
            "fibery/type": "Magatron space/–ó–∞–¥–∞—á–∞",
            "Name": task_data.get("title"),
            "Description": task_data.get("description"),
            "–°—Ä–æ–∫": due_date,
            "–ú–µ—Ç–∫–∏": task_data.get("labels"),
            "Tr Telegram Chat ID": str(chat_id),
            "Tr Telegram Message ID": str(message_id),
            "–°–æ–∑–¥–∞–Ω–æ –≤ Telegram": True
        }

        print("[DEBUG] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Fibery:")
        print(payload)

        headers = {
            "Authorization": f"Token {fibery_api_token}",
            "Content-Type": "application/json"
        }

        url = f"https://{fibery_workspace}.fibery.io/api/entities/Magatron%20space/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0"
        response = requests.post(url, json=[payload], headers=headers)

        if response.status_code == 200:
            return jsonify({"status": "ok"}), 200
        else:
            print("‚ùå Fibery –Ω–µ –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É:", response.text)
            return jsonify({"status": "error", "message": response.text}), 400

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        return jsonify({"status": "error", "message": str(e)}), 500


if __name__ == "__main__":
    app.run(port=8080)
