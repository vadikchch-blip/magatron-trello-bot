import os
import json
import requests
from flask import Flask, request
from datetime import datetime, timedelta
from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
app = Flask(__name__)

TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
ZAPIER_WEBHOOK_URL = os.environ["ZAPIER_WEBHOOK_URL"]

def ask_gpt_to_parse_task(text):
    system_prompt = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É. "
        "–û—Ç–≤–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Å –ø–æ–ª—è–º–∏: title (—Å—Ç—Ä–æ–∫–∞), description (—Å—Ç—Ä–æ–∫–∞), due_date (—Å—Ç—Ä–æ–∫–∞ –≤ ISO 8601 –∏–ª–∏ null), labels (—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫)."
    )

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": text}
        ],
        temperature=0.2,
    )

    return response.choices[0].message.content

def parse_due_date(text):
    if "–∑–∞–≤—Ç—Ä–∞" in text.lower():
        return (datetime.now() + timedelta(days=1)).isoformat()
    elif "—Å–µ–≥–æ–¥–Ω—è" in text.lower():
        return datetime.now().isoformat()
    else:
        return None

def send_message(chat_id, text):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        response = requests.post(url, json={"chat_id": chat_id, "text": text})
        print(f"üì® –û—Ç–≤–µ—Ç Telegram: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

@app.route("/", methods=["GET"])
def index():
    return "OK"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json

    try:
        message = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message} –æ—Ç chat_id={chat_id}")

        gpt_response = ask_gpt_to_parse_task(message)
        print(f"ü§ñ –û—Ç–≤–µ—Ç GPT: {gpt_response}")

        try:
            parsed = json.loads(gpt_response)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT:\n{e}\n{gpt_response}")
            return "ok"

        if not parsed or not parsed.get("title"):
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É")
            send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return "ok"

        if not parsed.get("due_date"):
            parsed["due_date"] = parse_due_date(message)

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Zapier: {parsed}")
        requests.post(ZAPIER_WEBHOOK_URL, json=parsed)

        send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {parsed['title']}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    return "ok"

if __name__ == "__main__":
    app.run(port=8080)
